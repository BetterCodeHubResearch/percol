#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2011 mooz
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

import sys
import os
import locale

from optparse import OptionParser

# add load path
if __name__ == '__main__':
    libdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    if os.path.exists(os.path.join(libdir, "percol")):
        sys.path.insert(0, libdir)

import percol
from percol import Percol
from percol import tty
from percol import debug
from percol import ansi

INSTRUCTION_TEXT = ansi.markup("""<bold><blue>{logo}</blue></bold>
                                <on_blue><underline> {version} </underline></on_blue>

<red><bold>Warning:</bold></red>
You are running percol in an <underline>interactive input mode</underline>.
Typical usage of percol are listed below.

<underline>(1) Giving a filename,</underline>

 $ <underline>percol</underline> /var/log/syslog

<underline>(2) or specifying a redirection.</underline>

 $ ps aux | <underline>percol</underline>

You can exit percol by pressing <on_blue> CTRL+C </on_blue> key.
""").format(logo = percol.__logo__,
            version = percol.__version__)

def load_rc(percol, path = None, encoding = 'utf-8'):
    if path is None:
        path = os.path.expanduser("~/.percol.d/rc.py")
    if not os.path.exists(path):
        path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'rc.py')
    try:
        with open(path, 'r') as rc:
            exec(rc.read().decode(encoding), locals())
    except Exception as e:
        debug.log("exception", e)

def setup_options(parser):
    parser.add_option("--tty", dest = "tty",
                      help = "path to the TTY (usually, the value of $TTY)")
    parser.add_option("--rcfile", dest = "rcfile",
                      help = "path to the settings file")
    parser.add_option("--encoding", dest = "encoding",
                      help = "encoding for input and output (default 'utf8')")
    parser.add_option("--query", dest = "query",
                      help = "pre-input query")
    parser.add_option("--match-method", dest = "match_method", default = "",
                      help = "specify matching method for query. `string` (default) and `regex` are currently supported")
    parser.add_option("--caret-position", dest = "caret",
                      help = "position of the caret (default length of the `query`)")
    parser.add_option("--initial-index", dest = "index",
                      help = "position of the initial index of the selection (numeric, \"first\" or \"last\")")
    parser.add_option("--peep", action = "store_true", dest = "peep", default = False,
                      help = "exit immediately with doing nothing to cache module files and speed up start-up time")

def set_proper_locale(options):
    locale.setlocale(locale.LC_ALL, '')
    encoding = locale.getpreferredencoding()
    if options.encoding:
        encoding = options.encoding
    return encoding

def read_input(filename, encoding):
    if filename:
        with open(filename, "r") as f:
            content = f.read()
    else:
        content = sys.stdin.read()
    candidates = unicode(content, encoding, "replace").split("\n")
    if len(candidates) > 0 and candidates[-1] == "":
        candidates.pop(-1)
    return candidates

def decide_match_method(options):
    if options.match_method == "regex":
        from percol import FinderMultiQueryRegex
        return FinderMultiQueryRegex
    else:
        from percol import FinderMultiQueryString
        return FinderMultiQueryString

if __name__ == "__main__":
    parser = OptionParser(usage = "Usage: %prog [options] [FILE]")
    setup_options(parser)
    options, args = parser.parse_args()

    if options.peep:
        exit(1)

    def exit_program(msg = None, show_help = True):
        if not msg is None:
            print("\n" + msg + "\n")
        if show_help:
            parser.print_help()
        exit(1)

    # get ttyname
    ttyname = options.tty or tty.get_ttyname()
    if not ttyname:
        exit_program("""Error: No tty name is given and failed to guess it from descriptors.
Maybe all descriptors are redirecred.""")

    # decide which encoding to use
    encoding = set_proper_locale(options)

    with open(ttyname, "r+w") as tty_f:
        if not tty_f.isatty():
            exit_program("Error: {0} is not a tty file".format(ttyname), show_help = False)

        filename = args[0] if len(args) > 0 else None

        if filename is None and sys.stdin.isatty():
            tty_f.write(INSTRUCTION_TEXT)

        # read input
        try:
            candidates = read_input(filename, encoding)
        except KeyboardInterrupt:
            exit_program("Canceled", show_help = False)

        # setup actions
        import percol.actions as actions
        acts = (actions.output_to_stdout, actions.output_to_stdout_double)

        with Percol(descriptors = tty.reconnect_descriptors(tty_f),
                    candidates = candidates,
                    actions = acts,
                    finder = decide_match_method(options),
                    query = options.query,
                    caret = options.caret,
                    index = options.index,
                    encoding = encoding) as percol:
            load_rc(percol, options.rcfile, encoding)
            exit_code = percol.loop()

        exit(exit_code)
