#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2011 mooz
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

import sys
import os
import locale

from optparse import OptionParser

# add load path
if __name__ == '__main__':
    libdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    if os.path.exists(os.path.join(libdir, "percol")):
        sys.path.insert(0, libdir)

from percol import Percol
from percol import tty
from percol import debug

def load_rc(percol, path = None):
    if path is None:
        path = os.path.expanduser("~/.percol.d/rc.py")
    if not os.path.exists(path):
        path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'rc.py')
    try:
        with open(path, 'r') as rc:
            exec(rc.read(), locals())
    except Exception as e:
        debug.log("exception", e)

def setup_options(parser):
    parser.add_option("--tty", dest = "tty", help = "path to the TTY (usually, the value of $TTY)")
    parser.add_option("--rcfile", dest = "rcfile", help = "path to the settings file")
    parser.add_option("--encoding", dest = "encoding", help = "encoding for input and output (default 'utf8').")

if __name__ == "__main__":
    parser = OptionParser(usage = "Usage: %prog [options] [FILE]")
    setup_options(parser)
    options, args = parser.parse_args()

    def exit_program(msg=None):
        if not msg is None:
            print("\n" + msg + "\n")
        parser.print_help()
        exit(1)

    # get ttyname
    ttyname = options.tty or tty.get_ttyname()
    if not ttyname:
        exit_program("""Error: No tty name is given and failed to guess (maybe stderr is redirecred)""")

    # decide which encoding to use
    encoding = locale.getpreferredencoding()
    if options.encoding:
        encoding = options.encoding

    with open(ttyname, "r+w") as tty_f:
        if not tty_f.isatty():
            exit_program("Error: {0} is not a tty file".format(ttyname))

        # read input
        filename = args[0] if len(args) > 0 else None
        if filename:
            with open(filename, "r") as f:
                content = f.read()
        else:
            content = sys.stdin.read()
        collection = unicode(content, encoding, 'replace').split("\n")

        # setup actions
        import percol.actions as actions

        acts = (actions.output_to_stdout, actions.output_to_stdout_double)

        with Percol(descriptors = tty.reconnect_descriptors(tty_f),
                    collection = collection,
                    actions = acts,
                    encoding = encoding) as percol:
            load_rc(percol, options.rcfile)
            percol.loop()
